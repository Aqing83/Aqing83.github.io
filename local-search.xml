<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Thread源码解析</title>
    <link href="/2022/06/12/Thread%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/06/12/Thread%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="1、Thread-init"><a href="#1、Thread-init" class="headerlink" title="1、Thread.init()"></a>1、Thread.init()</h2><p>​一个新构造的线程对象是由其parent线程来进行空间分配的，而child线程继承了parent是否为Daemon、优先级和加载资源的contextClassLoader以及可继承的ThreadLocal，同时还会分配一个唯一的（sync）ID来标识这个child线程。至此，一个能够运行的线程对象就初始化好了，在堆内存中等待着运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name,</span><br><span class="hljs-params">                     <span class="hljs-type">long</span> stackSize)</span> &#123;<br>       init(g, target, name, stackSize, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name,</span><br><span class="hljs-params">                     <span class="hljs-type">long</span> stackSize, AccessControlContext acc,</span><br><span class="hljs-params">                     <span class="hljs-type">boolean</span> inheritThreadLocals)</span> &#123;<br>       <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;name cannot be null&quot;</span>);<br>       &#125;<br><br>       <span class="hljs-built_in">this</span>.name = name;<br><br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> currentThread();<br>       <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">security</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>       <span class="hljs-comment">//这里首先判断有没有传入ThreadGroup,如果有，则跳过</span><br>       <span class="hljs-keyword">if</span> (g == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">/* Determine if it&#x27;s an applet or not */</span><br><br>           <span class="hljs-comment">/* If there is a security manager, ask the security manager</span><br><span class="hljs-comment">              what to do. */</span><br>           <span class="hljs-comment">//如果没有传入ThreadGroup，会先去判断securityManager是否为空，如果不为空，则使用securityManager的ThreadGroup</span><br>           <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>               g = security.getThreadGroup();<br>           &#125;<br><br>           <span class="hljs-comment">/* If the security doesn&#x27;t have a strong opinion of the matter</span><br><span class="hljs-comment">              use the parent thread group. */</span><br>           <span class="hljs-comment">//如果既没有传入ThreadGroup，且他的securityManager也为空，那么就是用当前父线程的ThreadGroup</span><br>           <span class="hljs-keyword">if</span> (g == <span class="hljs-literal">null</span>) &#123;<br>               g = parent.getThreadGroup();<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">/* checkAccess regardless of whether or not threadgroup is</span><br><span class="hljs-comment">          explicitly passed in. */</span><br>       g.checkAccess();<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Do we have the required permissions?</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">if</span> (isCCLOverridden(getClass())) &#123;<br>               security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);<br>           &#125;<br>       &#125;<br><br>       g.addUnstarted();<br><br>       <span class="hljs-built_in">this</span>.group = g;<br>       <span class="hljs-comment">//child线程继承了parent是否为Daemon、优先级和加载资源的contextClassLoader以及可继承的ThreadLocal</span><br>       <span class="hljs-built_in">this</span>.daemon = parent.isDaemon();<span class="hljs-comment">//是否Daemon</span><br>       <span class="hljs-built_in">this</span>.priority = parent.getPriority();<span class="hljs-comment">//优先级</span><br>       <span class="hljs-keyword">if</span> (security == <span class="hljs-literal">null</span> || isCCLOverridden(parent.getClass()))<br>           <span class="hljs-built_in">this</span>.contextClassLoader = parent.getContextClassLoader();<span class="hljs-comment">//加载资源的contextClassLoader</span><br>       <span class="hljs-keyword">else</span><br>           <span class="hljs-built_in">this</span>.contextClassLoader = parent.contextClassLoader;<br>       <span class="hljs-built_in">this</span>.inheritedAccessControlContext =<br>               acc != <span class="hljs-literal">null</span> ? acc : AccessController.getContext();<br>       <span class="hljs-built_in">this</span>.target = target;<br>       setPriority(priority);<br>       <span class="hljs-keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="hljs-literal">null</span>)<br>           <span class="hljs-built_in">this</span>.inheritableThreadLocals =<span class="hljs-comment">//可继承的ThreadLocal</span><br>               ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);<br>       <span class="hljs-comment">/* Stash the specified stack size in case the VM cares */</span><br>       <span class="hljs-built_in">this</span>.stackSize = stackSize;<br><br>       <span class="hljs-comment">/* Set thread ID */</span><br>       tid = nextThreadID();<br>   &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextThreadID</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> ++threadSeqNumber;<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="2、Thrad-start"><a href="#2、Thrad-start" class="headerlink" title="2、Thrad.start()"></a>2、Thrad.start()</h2><p>​线程对象在初始化完成之后，调用start()方法就可以启动这个线程。线程start()方法的含义是：当前线程（即parent线程）同步告知Java虚拟机，只要线程规划器空闲，应立即启动调用start()方法的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>       <br>       <span class="hljs-keyword">if</span> (threadStatus != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>       <br>       group.add(<span class="hljs-built_in">this</span>);<br><br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">started</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//start0方法完全执行之前，线程会处于一个Ready状态</span><br>           start0();<br>           <span class="hljs-comment">//start0方法执行后，线程就会进入了Running状态</span><br>           started = <span class="hljs-literal">true</span>;<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-comment">//如果线程在执行start0时发生了异常</span><br>               <span class="hljs-keyword">if</span> (!started) &#123;<br>                  group.threadStartFailed(<span class="hljs-built_in">this</span>);<br>               &#125;<br>           &#125; <span class="hljs-keyword">catch</span> (Throwable ignore) &#123;<br>               <span class="hljs-comment">/* do nothing. If start0 threw a Throwable then</span><br><span class="hljs-comment">                 it will be passed up the call stack */</span><br>           &#125;<br>       &#125;<br>   &#125;<br><br><span class="hljs-comment">//是一个本地方法，大概意思就是让jvm去通知操作系统，调度此线程</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//进入remove流程，把线程移除，并将执行失败的未开启线程数+1</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadStartFailed</span><span class="hljs-params">(Thread t)</span> &#123;<br>       <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>           remove(t);<br>           nUnstartedThreads++;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3、Thread-sleep-amp-Object-wait"><a href="#3、Thread-sleep-amp-Object-wait" class="headerlink" title="3、Thread.sleep() &amp; Object.wait()"></a>3、Thread.sleep() &amp; Object.wait()</h2><p>​这里会对比解析Object.wait()方法和Thread.sleep()方法，主要从以下几个方便进行解析</p><h3 id="1、是否会释放锁？"><a href="#1、是否会释放锁？" class="headerlink" title="1、是否会释放锁？"></a>1、是否会释放锁？</h3><p>​下面是Thread的sleep方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Causes the currently executing thread to sleep (temporarily cease</span><br><span class="hljs-comment">    * execution) for the specified number of milliseconds, subject to</span><br><span class="hljs-comment">    * the precision and accuracy of system timers and schedulers. The thread</span><br><span class="hljs-comment">    * does not lose ownership of any monitors.**这里翻译：不会失去任何监视器的所有权**</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span>  millis</span><br><span class="hljs-comment">    *         the length of time to sleep in milliseconds</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span>  IllegalArgumentException</span><br><span class="hljs-comment">    *          if the value of &#123;<span class="hljs-doctag">@code</span> millis&#125; is negative</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span>  InterruptedException</span><br><span class="hljs-comment">    *          if any thread has interrupted the current thread. The</span><br><span class="hljs-comment">    *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span><br><span class="hljs-comment">    *          cleared when this exception is thrown.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br></code></pre></td></tr></table></figure><p>​下面是Object的wait()方法</p><img src="/2022/06/12/Thread%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/p2.png" class="" title="Object的wait()方法"><p>如图所示，也是会释放锁的</p><h3 id="2、是否对中断敏感？"><a href="#2、是否对中断敏感？" class="headerlink" title="2、是否对中断敏感？"></a>2、是否对中断敏感？</h3><p>​下为Thread.sleep()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> <span class="hljs-keyword">throws</span> InterruptedException;<span class="hljs-comment">//会抛出InterruptedException，所以Thread.sleep()方法对中断敏感</span><br></code></pre></td></tr></table></figure><p>​下为Object.wait()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br>    wait(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、是否释放-CPU？"><a href="#3、是否释放-CPU？" class="headerlink" title="3、是否释放 CPU？"></a>3、是否释放 CPU？</h3><p>​判断Thread.sleep()是否会释放CPU，有如下代码示例可供测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepRelaseCPUTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubThread</span>(),<span class="hljs-string">&quot;Daemon Thread!&quot;</span>+i);<br>            thread.start();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName());<br>                Thread.sleep(<span class="hljs-number">500000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;FINISH!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在开始运行之前，打开任务管理器，监控CPU的使用变化</p><img src="/2022/06/12/Thread%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/p1.png" class="" title="正常状态"><p>​这是启动后，CPU利用率有一个明显的飙升，但是又很快的回落了下去（图片如下），所以大概可以判断出来Thread.sleep()是会释放CPU资源的。</p><img src="/2022/06/12/Thread%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/p4.png" class="" title="启动后"><h2 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h2><p>未完待续…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/12/hello-world/"/>
    <url>/2022/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线程状态的转换时机</title>
    <link href="/2021/06/12/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%97%B6%E6%9C%BA/"/>
    <url>/2021/06/12/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>线程状态：</p><p>线程一共有六个状态，分别为：<strong>新建（NEW）</strong>、<strong>运行（RUNNABLE）</strong>、<strong>等待（WAITING）</strong>、<strong>超时等待（TIMED_WAITING）</strong>、<strong>阻塞（BLOCKED）</strong>、<strong>终止（TERMINATED）</strong>；其中运行中又可以分为两个状态，一个是<strong>就绪（READY）</strong>，另一个是<strong>运行中（RUNNING）</strong>，就绪和运行中都属于运行状态，他俩之间的状态关系为，一个运行线程获取到系统分配的时间片时候就是运行中状态，如果没有被分配到时间片那就是就绪状态。</p><p>下图是线程各个状态之间的转换时机</p><img src="/2021/06/12/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%97%B6%E6%9C%BA/p1.png" class="" title="图片引用方法一">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><p><img src="/test.jpg" alt="图片引用方法二"></p><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
